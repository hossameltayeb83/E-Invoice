@page "/"
@page "/Invoices"
@inject IService<InvoiceDto> _service
<FiltersComponent SearchSubmited="OnPaginatedSearch" FilterFor="Invoices">
	<div class="col-md-4">
		<label for="name">Customer Name</label>
		<input type="text" @bind-value=@SearchCriteria.CustomerName id="name" class="form-control" />
	</div>
	<div class="col-md-4">
		<label for="code">Code</label>
		<input type="text" @bind-value=@SearchCriteria.Code id="code" class="form-control" />
	</div>
	<div class="col-md-4">
		<label for="type">Type</label>
		<select @bind="SearchCriteria.Type" id="type" class="form-select">
			<option value >Select a type</option>
			<option value="0" >Sale</option>
			<option value="1" >Refund</option>
		</select>
	</div>
</FiltersComponent>

<div class="card">
	<div class="card-header">
		<a class="btn btn-primary" href="/Invoices/Form"><i class="ri-add-line me-md-1_5"></i>Create Invoice</a>

	</div>
	<TableComponent>
		<thead>
			<tr>
				<th>Customer Name</th>
				<th>Code</th>
				<th>Type</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody class="table-border-bottom-0">
			<List Deleted="OnDelete" Invoices="Invoices"></List>
		</tbody>
	</TableComponent>
	<div class="card-footer">
		<PaginationComponent Pagination="Pagination" PaginationChanged="OnPaginatedSearch"></PaginationComponent>
	</div>
</div>
@code {
	public List<InvoiceDto> Invoices { get; set; }
	public InvoiceDto SearchCriteria { get; set; } = new();
	public PaginationInfo Pagination { get; set; } = new();

	protected async override Task OnInitializedAsync()
	{
		var response = await _service.GetAll();
		if (response.Result != null)
		{
			Invoices = response.Result;
			Pagination = response.Pagination!;
		}
	}
	public async Task OnPaginatedSearch()
	{
		var response = await _service.GetAllWithSearch(SearchCriteria, Pagination.Page, Pagination.PageSize);
		if (response.Result != null)
		{
			Invoices = response.Result;
			Pagination = response.Pagination!;
		}
	}
	public async Task OnDelete(int id)
	{
		await _service.Delete(id);
	}
}
