@inject IService<TaxDto> _taxService
<div class="mb-4">
    <div class="d-flex border rounded position-relative pe-0">
        <div class="row w-100 p-5 gx-5">
            <div class="col-md-6 col-12 mb-md-0 mb-4">
                <p class="h6 repeater-title">Tax</p>
                <AutoComplete @bind-Value="Model.TaxName"
                              TItem="TaxDto"
                              DataProvider="TaxesDataProvider"
                              PropertyName="Name"
                              Placeholder="Choose a tax"
                              OnChanged="(TaxDto Tax) => OnAutoCompleteChanged(Tax)" />


            </div>
            <div class="col-md-3 col-12 mb-md-0 mb-4">
                <p class="h6 repeater-title">Rate</p>
                <div class="input-group input-group input-group-merge ">
                    <InputNumber @bind-Value=Model.TaxRate type="number" @oninput="HandleRateChange" class="form-control" id="TaxRate" />
                    <span class="input-group-text">%</span>
                </div>

            </div>


            <div class="col-md-2 col-12 mb-md-0 mb-4">
                <p class="h6 repeater-title">Amount</p>
                <InputNumber @bind-Value=Model.Amount type="text" @oninput="HandleAmountChange" class="form-control invoice-item-qty" placeholder="1" />
            </div>
        </div>
        <div class="d-flex flex-column align-items-center justify-content-between border-start p-2">
            <button class="btn btn-danger" @onclick="OnInvoiceLineTaxDeleted"><i class="ri-close-line cursor-pointer" data-repeater-delete></i></button>

        </div>
    </div>
</div>


@code {
    [Parameter]
    public InvoiceLineTaxDto Model { get; set; }
    [Parameter]
    public InvoiceLineDto InvoiceLine { get; set; }
    [Parameter]
    public EventCallback<InvoiceLineTaxDto> OnInvoiceLineDeletion { get; set; }
    [Parameter]
    public EventCallback OnTaxAmountChanged { get; set; }
    private async Task<AutoCompleteDataProviderResult<TaxDto>> TaxesDataProvider(AutoCompleteDataProviderRequest<TaxDto> request)
    {
        Model.TaxName = request.Filter.Value;
        var taxes = await _taxService.GetList("Name", request.Filter.Value); // API call
        return await Task.FromResult(new AutoCompleteDataProviderResult<TaxDto> { Data = taxes!, TotalCount = taxes.Count() });
    }
    private void OnAutoCompleteChanged(TaxDto tax)
    {
        Model.TaxId = tax.Id;
        Model.TaxRate = tax.DefaultRate; 
        Model.Amount = InvoiceLine.Amount*( Model.TaxRate /100 );
        OnTaxAmountChanged.InvokeAsync();
        Console.WriteLine($"'{tax?.Name}' with id {tax?.Id}' selected.");
    }
    public void OnInvoiceLineTaxDeleted()
    {
        OnInvoiceLineDeletion.InvokeAsync(Model);
    }
    public void HandleAmountChange(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out var amount))
        {
            if (amount < InvoiceLine.Amount)
            {
                Model.Amount = amount;
                Model.TaxRate = (amount *100)/InvoiceLine.Amount;
                OnTaxAmountChanged.InvokeAsync();
            }
        }
    }
    public void HandleRateChange(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out var rate))
        {
            Model.TaxRate = rate;
            Model.Amount = InvoiceLine.Amount * (rate / 100);
            OnTaxAmountChanged.InvokeAsync();
        }
    }
}
