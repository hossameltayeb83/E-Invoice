@page "/Invoices/Form"
@page "/Invoices/Form/{id:int}"
@inject IService<InvoiceDto> _invoiceService
@inject IService<CustomerDto> _customerService
@inject NavigationManager _navManager
<div class="col-12 mb-lg-0 mb-6">
    <div class="card invoice-preview-card p-sm-12 p-6">
    <div class="card-header d-flex justify-content-between align-items-center">
        <a href="/Invoices" class="btn btn-secondary">Back To Invoices</a>
    </div>
        <EditForm Model="Model" OnValidSubmit="Submit">
        <FluentValidationValidator/>
        <div class="card-body invoice-preview-header rounded p-6">
            <div class="d-flex flex-wrap flex-column flex-sm-row justify-content-between text-heading">
                <div class="mb-md-0 mb-6">
                    <div class="d-flex svg-illustration align-items-center gap-3 mb-6">
                        <span class="app-brand-logo demo">
                            <span style="color:var(--bs-primary);">
                                <img src="/codeZoneLogo.webp" />
                            </span>
                        </span>
                    </div>
                    <ValidationSummary/>
                    
                </div>
                <div class="col-md-5 col-8 pe-0 ps-0 ps-md-2">
                    <dl class="row mb-0 gx-4">
                        <dt class="col-sm-5 mb-2 d-md-flex align-items-center justify-content-start">
                            <span class="h5 text-capitalize mb-0 text-nowrap">Code</span>
                        </dt>
                        <dd class="col-sm-7">
                            <div class="input-group input-group-sm input-group-merge">
                                <span class="input-group-text">#</span>
                                    <InputText type="text" @bind-Value=Model.Code @oninput="CheckCodeIsUnique"  class="form-control" id="code" />
                                    @if (!string.IsNullOrEmpty(CodeErrorMessage))
                                    {
                                        <div class="text-danger">@CodeErrorMessage</div>
                                    }
                            </div>
                        </dd>
                        @if (IsEdit)
                        {
                            <dt class="col-sm-5 mb-2 d-md-flex align-items-center justify-content-start">
                                <span class="fw-normal text-nowrap">Date Issued:</span>
                            </dt>
                            <dd class="col-sm-7">
                                <input @bind-value=Model.DateTimeIssued disabled class="form-control form-control-sm" />
                            </dd>
                        }
                        <dt class="col-sm-5 mb-2 d-md-flex align-items-center justify-content-start">
                            <span class="fw-normal text-nowrap">Invoice To:</span>
                        </dt>
                        <dd class="col-sm-7">
                                <AutoComplete disabled="@IsEdit" @bind-Value="Model.CustomerName"
                                              TItem="CustomerDto"
                                              DataProvider="CustomersDataProvider"
                                              PropertyName="Name"
                                              OnChanged="(CustomerDto customer) => OnAutoCompleteChanged(customer)" />
                        </dd>
                            <dt class="col-sm-5 mb-2 d-md-flex align-items-center justify-content-start">
                                <span class="fw-normal text-nowrap">Invoice Type:</span>
                            </dt>
                            <dd class="col-sm-7">
                                <InputSelect disabled="@IsEdit" class="form-select" @bind-Value="@Model.Type">
                                    @foreach (var type in Enum.GetValues(typeof(InvoiceType)))
                                    {
                                        <option value="@type">@type</option>
                                    }
                                </InputSelect>
                            </dd>
                        <dt class="col-sm-5 mb-2 d-md-flex align-items-center justify-content-start">
                            <span class="fw-normal text-nowrap">Net Amount:</span>
                        </dt>
                        <dd class="col-sm-7">
                            <div class="input-group input-group-sm input-group-merge disabled">
                                
                                <InputNumber @bind-Value="Model.NetAmount" type="number" class="form-control" disabled id="NetAmount" />
                            </div>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>

        
        <hr class="mt-0 mb-6">
        <div class="card-body pt-0 px-0">

            @if (Model.InvoiceLines != null)
            {
                @foreach(var invoiceLine in Model.InvoiceLines)
                { 
                    <InvoiceLine Model="invoiceLine" OnItemNetAmountChange="OnNetAmountChanged" OnInvoiceLineDeletion="DeleteInvoiceLine"></InvoiceLine>
                
                }
            }
            <div class="row">
                <div class="col-12">
                    <button type="button" @onclick="AddInvoiceLine" class="btn btn-success btn-sm" data-repeater-create><i class="ri-add-line ri-14px me-1"></i> Add Item</button>
                </div>
            </div>
        </div>
        <div>
                <button type="submit" class="btn me-2 btn-primary">@(IsEdit ? "Save" : "Add") Invoice</button>
                @if (IsEdit)
                {
                    <button type="button" @onclick="Delete" class="btn btn-danger">Delete</button>
                }
        </div>
        </EditForm>

        
        
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    public InvoiceDto Model { get; set; } = new();
    public bool IsEdit { get; set; }
    public string CodeErrorMessage { get; set; }
    protected async override Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Model = await _invoiceService.GetOne(Id);
            if (Model != null)
                IsEdit = true;
        }
        base.OnParametersSet();
    }
    private async Task<AutoCompleteDataProviderResult<CustomerDto>> CustomersDataProvider(AutoCompleteDataProviderRequest<CustomerDto> request)
    {
        var customers = await _customerService.GetList("Name",request.Filter.Value); // API call
        return await Task.FromResult(new AutoCompleteDataProviderResult<CustomerDto> { Data = customers!, TotalCount = customers.Count() });
    }
    private void OnAutoCompleteChanged(CustomerDto customer)
    {
        Model.CustomerId = customer.Id;
        Console.WriteLine($"'{customer?.Name}' with id {customer?.Id}' selected.");
    }
    public void AddInvoiceLine()
    {
        if(Model.InvoiceLines!=null)
            Model.InvoiceLines.Add(new InvoiceLineDto(){Quantity=1});
        else
        {
            Model.InvoiceLines = new List<InvoiceLineDto> { new InvoiceLineDto() {Quantity=1 } };
        }
    }
    public void DeleteInvoiceLine(InvoiceLineDto invoiceLine)
    {
        var toDelete = Model.InvoiceLines.IndexOf(invoiceLine);
        Model.InvoiceLines!.RemoveAt(toDelete);
        OnNetAmountChanged();
    }
    public void OnNetAmountChanged()
    {
        Model.NetAmount = 0;
        foreach(var invoiceLine in Model.InvoiceLines!)
        {
            Model.NetAmount += invoiceLine.ItemNetAmount;
        }
    }
    public async Task Submit()
    {
        if (string.IsNullOrEmpty(CodeErrorMessage))
            if (IsEdit)
            {
                Model.Id = Id;
                await _invoiceService.Update(Model);
            }
            else
            {
                var id = await _invoiceService.Create(Model);
                if (id != null)
                {
                    _navManager.NavigateTo($"/Invoices/Form/{id}");
                }
            }
    }
    public async Task Delete()
    {
        if (await _invoiceService.Delete(Id))
            _navManager.NavigateTo($"/Invoices");
    }
    public async Task CheckCodeIsUnique(ChangeEventArgs e)
    {
        var items = await _invoiceService.GetAllWithSearch(new InvoiceDto { Code = e.Value.ToString() }, 1, 1);

        if (items.Result != null && items.Result.Any())
            CodeErrorMessage = "An Invoice With This Code Already Exist.";
        else
            CodeErrorMessage = string.Empty;

    }
}
